        -:    0:Source:sample1001.c
        -:    0:Graph:sample1001.gcno
        -:    0:Data:sample1001.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#define X 10
function get_min_position called 0 returned 0% blocks executed 0%
    #####:    3:int get_min_position(int array[], int left, int right)
        -:    4:{
        -:    5:    int idx;
        -:    6:    int min_position;
    #####:    7:    min_position = left;
    #####:    8:    for (idx = left + 1; idx <= right; idx++)
branch  0 never executed
branch  1 never executed
        -:    9:    {
    #####:   10:        if (array[idx] < array[min_position])
branch  0 never executed
branch  1 never executed
    #####:   11:            min_position = idx;
        -:   12:    }
    #####:   13:    return min_position;
        -:   14:}
function selection_sort called 0 returned 0% blocks executed 0%
    #####:   15:void selection_sort(int array[], int right)
        -:   16:{
        -:   17:    int left, idx, min_position;
    #####:   18:    for (left = 0; left < right; left++)
branch  0 never executed
branch  1 never executed
        -:   19:    {
    #####:   20:        idx = get_min_position(array, left, right - 1);
call    0 never executed
    #####:   21:        if (idx != left)
branch  0 never executed
branch  1 never executed
        -:   22:        {
    #####:   23:            min_position = array[idx];
    #####:   24:            array[idx] = array[left];
    #####:   25:            array[left] = min_position;
        -:   26:        }
        -:   27:    }
    #####:   28:}
function main called 1 returned 100% blocks executed 22%
        1:   29:int main(void)
        -:   30:{
        -:   31:    int idx, n, array[X];
        1:   32:    scanf("%d", &n);
call    0 returned 1
        1:   33:    if (n <= 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   34:    {
        1:   35:        printf("[ERROR] data count must be positive!\n");
call    0 returned 1
        1:   36:        return 1;
        -:   37:    }
    #####:   38:    if (n > X)
branch  0 never executed
branch  1 never executed
        -:   39:    {
    #####:   40:        printf("[ERRRO] too many data!\n");
call    0 never executed
    #####:   41:        return 1;
        -:   42:    }
    #####:   43:    for (idx = 0; idx < n; idx++)
branch  0 never executed
branch  1 never executed
    #####:   44:        scanf("%d", &array[idx]);
call    0 never executed
    #####:   45:    printf("before: ");
call    0 never executed
    #####:   46:    for (idx = 0; idx < n; idx++)
branch  0 never executed
branch  1 never executed
    #####:   47:        printf("%d ", array[idx]);
call    0 never executed
    #####:   48:    printf("\n");
call    0 never executed
    #####:   49:    selection_sort(array, n);
call    0 never executed
    #####:   50:    printf("after:  ");
call    0 never executed
    #####:   51:    for (idx = 0; idx < n; idx++)
branch  0 never executed
branch  1 never executed
    #####:   52:        printf("%d ", array[idx]);
call    0 never executed
    #####:   53:    printf("\n");
call    0 never executed
    #####:   54:    return 0;
        -:   55:}
